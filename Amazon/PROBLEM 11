class Solution
{
    public:
    vector<int> ans;
    void dfs(Node* root){
        if(!root){
          ans.push_back(int(NULL));
          return;
        }
          
          
        ans.push_back(root->data);
        dfs(root->left);
        dfs(root->right);
    }
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        dfs(root);
        return ans;
    }
    
    //Function to deserialize a list and construct the tree.
    int idx = 0;
    Node * deSerialize(vector<int> &ans)
    {
       if(ans.size()-1 < idx or ans[idx]==(int)NULL){
           idx++;
           return nullptr;
        }
        
        Node *root = new Node(ans[idx++]);
        root->left = deSerialize(ans);
        root->right = deSerialize(ans);
        
        return root;
    }
