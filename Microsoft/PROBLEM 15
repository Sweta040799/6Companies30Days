 void dfs(vector<int> adj[], int idx, string &ans, vector<int>& visit){
        visit[idx] = 1;
        for(auto k : adj[idx]){
            if(visit[k] == 0)
              dfs(adj, k, ans, visit);
        }
        ans.push_back(idx + 'a');
    }
    string findOrder(string dict[], int n, int k) {
        string ans;
        vector<int> adj[k];
        for(int i=0;i<n-1;i++){
            string s1 = dict[i];
            string s2 = dict[i+1];
            for(int j=0;j<min(s1.size(),s2.size());j++){
                if(s1[j] != s2[j]){
                    adj[s1[j] - 'a'].push_back(s2[j] - 'a');
                    break;
                }
            }
        }
        
        vector<int> visit(k,0);
       
        for(int i=0;i<k;i++){
            if(adj[i].size()){
              for(auto it : adj[i]){
                  if(visit[it] == 0)
                     dfs(adj,it,ans,visit);
              } 
            }
        }
        
       
        reverse(ans.begin(),ans.end());
        return ans;
    }
